Head First Design Pattern : "Toolbox for OO Design"

	* "Basic OO"
		=> Abstraction 
		=> Encapsulation
		=> Inheritance
		=> Polymorphism
		
		* Those basics doesn't make you good OO designer.
		
	* "OO Principles"
		=> Encapsulate what varies.
		=> Favor "Composition" rather than "Inheritance".
		=> Program to interfaces, not on implentation.
		=> Strive for loosely coupled design between objects that interact.
		=> Open Close Principle (OCP) : Class should be open for "extension", but closed for "modification"
		
	* "OO Patterns"
		- Strategy :
			** Define a set of algorithm,
			** Encapsulate them,
			** Make them interchangeable at runtime.
		
		- Observer :
			** Define a one-to-many dependency between objects,
			** So that when one Object changes state
			** All it depends are notifiy and updated automatically.
		
		
		-----> Favor "Composition" rather that "Inheritance"
			* When you make reuse wiht inheritence, all the behavior will be set statically at runtime,
			* All those subclasses will inherit the same behavior
			* In the other hand, having reuse through "Composition" will allow you to "set the reuse behaviour at runtime", so dynamically
			* You can even alter the behaviour when using "Composition" in the opposite of the inheritence.
			* This way, you will be able to add multiple behavior to object at runtime, even the kind of behaviour imagine by the design at the beginning. 
			
			** The effect of this rule on code maintainance : using this technique will allow you to :
				* Add new functionnality at runtime to an abject.
				* Write new code to add new behaviour instead of altering the existing code.
				* "Avoid changing code" will reduce the chance to put "bug or side effect" in existing code.
		
		-----> OCP : "Open Close Principle"
			* This mean that our classes are open for extension, so feel free to extends them with new behaviors as your requirements changes, cause they will.
			* But don't alter the existing code, cause we have spend a lot time making this code work, so altering it may increase the chance to put bug in it and even side effects.
			* Respecting this principle will lead to Designs that are resilient to changes a easy to add new functionalities to meet changing requirements.
			
			** This lead us to a big questions 
				1. How can a design be close to modification & open for extension ? isn't it contradictory ?
					=> At first it may seem contradictory, when you extends by using inheritence. (it hard to extends system without modifying underline code)
					=> But remenber the Observer Pattern where we can add as much as Observers to the Subject (=> Extending Subject) without changing the subject behavior.
					=> Of course this mean that there are "OO designs techniques" that allow this kind of this.
					
				2. In general, how to make a code open for extension & close to modification ?
					Most of the patterns & techniques give a means of extends without modification on the code.
					
				3. How can I make every part of my design follow the OCP ?
					we may not apply OCP everywhere, instead we will have to concentrate on those area of the code that are most likely to change,
					And apply the techniques, so having OCP everywhere may lead to a complex code hard to understand.
					
			